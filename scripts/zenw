#!/bin/sh

set -e
set -u

ESC="$(printf '\033')"

if [ "${NOCOLOR+x}" != 'x' ] || [ "${NO_COLOR+x}" != 'x' ]; then
    RED="${ESC}[31m"
    GREEN="${ESC}[32m"
    YELLOW="${ESC}[33m"
    RESET="${ESC}[0m"
else
    RED=''
    GREEN=''
    YELLOW=''
    RESET=''
fi


OS="$(uname)"
ARCH="$(uname -m)"

case "${ARCH}" in
    aarch64_be|aarch64|armv8b|armv8l) ARCH='arm64' ;;
    x86_64) ARCH='amd64' ;;
esac

has_command () {
    command -v "${1}" > /dev/null 2>&1
}

# get_profile () {
#     while [ "${#}" -gt 0 ]
#     do
#         case "${1}" in
#             --profile=*) echo "${1#*=}"; return;;
#             --profile) echo "${2}"; return;;
#             *) shift;;
#         esac
#     done
# }

# Config files on order of precedence high to low.
CONFIGS="$(cat <<- EOS
	.zenconfig
	${HOME}/.zen/config
	/etc/zen/zenconfig
EOS
)"

read_config() {
    # Disable globbing to ensure word-splitting is safe.
    set -f

    old_ifs="${IFS}"
    search_term="${1}"

    IFS='
'

    # This is intended, we *do* want word-splitting here.
    # shellcheck disable=2086
    set -- ${CONFIGS}

    grep -i "${search_term}" "${@}" 2> /dev/null | head -n 1

    IFS="${old_ifs}"
    set +f
}

# We might already have it downloaded...
LOCATION="$(read_config '^\s*location' | cut -d '=' -f 2 | tr -d ' ')"

if [ "${LOCATION:+x}" != 'x' ]; then
    if [ "${HOME:+x}" != 'x' ]; then
        # shellcheck disable=2016
        printf >&2 '%b$HOME not set, not sure where to look for Zen.%b\n' "${RED}" "${RESET}"
        exit 1
    fi

    LOCATION="${HOME}/.zen"
else
    # It can contain a literal ~, need to explicitly handle that.
    LOCATION="$(echo "${LOCATION}" | sed "s|~|${HOME}|")"
fi

# If this exists at any version, let it handle any update.

VERSION="$(read_config '^\s*version[^a-z]')"
VERSION="${VERSION#*=}"                    # Strip until after first =
VERSION="$(echo "${VERSION}" | tr -d ' ')" # Remove all spaces
VERSION="${VERSION#>=}"                    # Strip any initial >=


if has_command curl; then
    TRANSFER_TOOL='curl'
    TRANSFER_SILENT_OPTS='-fsSL'
    TRANSFER_PROGRESS_OPTS='-fSL'
elif has_command wget; then
    TRANSFER_TOOL='wget'
    TRANSFER_SILENT_OPTS='-qO-'
    TRANSFER_PROGRESS_OPTS='-O-'
else
    printf >&2 '%bUnable to find a command for network operations%b\n' "${RED}" "${RESET}"
    printf >&2 'Please install either curl or wget\n'
    exit 1
fi

if [ "${VERSION:+x}" != 'x' ]; then
    printf >&2 "%bCan't determine version, will use latest.%b\n" "${YELLOW}" "${RESET}"
    VERSION=$(${TRANSFER_TOOL} ${TRANSFER_SILENT_OPTS} "https://api.github.com/repos/zen-io/zen/releases/latest" | grep -o '"tag_name": *"[^"]*"' | tr -d '"' | cut -d " " -f2)
fi

# Find the os / arch to download. You can do this quite nicely with go env
# but we use this script on machines that don't necessarily have Go itself.
if [ "${OS}" = 'Linux' ]; then
    GOOS='linux'
elif [ "${OS}" = 'Darwin' ]; then
    GOOS='darwin'
# elif [ "${OS}" = 'FreeBSD' ]; then
#     GOOS='freebsd'
else
    printf >&2 '%bUnknown operating system %s%b\n' "${RED}" "${OS}" "${RESET}"
    exit 1
fi

ZEN_URL="https://github.com/zen-io/zen/releases/download/${VERSION}/zen_v${VERSION}_${GOOS}_${ARCH}"
DIR="${LOCATION}/${VERSION}"

# Potentially we could reuse this but it's easier not to really.
if [ ! -d "${DIR}" ]; then
    rm -Rf "${DIR}"
fi

TARGET="${DIR}/zen_v${VERSION}_${GOOS}_${ARCH}"
if [ ! -f "${TARGET}" ]
then
  printf >&2 '%bDownloading Zen %s to %s...%b\n' "${GREEN}" "${VERSION}" "${DIR}" "${RESET}"
  mkdir -p "${DIR}"

  ${TRANSFER_TOOL} ${TRANSFER_PROGRESS_OPTS} "${ZEN_URL}" -o ${TARGET}
  chmod +x ${TARGET}

  printf >&2 '%bShould be good to go now, running zen...%b\n' "${GREEN}" "${RESET}"
fi

# shellcheck disable=2086
exec "${TARGET}" ${ZEN_ARGS:-} "${@}"